[{"categories":["posts"],"content":"记录我在做《计算机网络：自顶向下方法》实验过程的一些问题以及掌握的知识。同时也包含了 python 语言的一些入门。\n因为自己没有系统的去学习过 python 语言，所以在编程的过程中一边一葫芦画瓢，一边借助 Copilot 辅助。在以前用的相对偏少，这次频繁使用后深感现在生成式 AI 的强大，就连在复制实验提供的代码框架时，仅仅复制了一半的框架，自动补全另一半框架和实验提供框架完全一致。这个或许是数据库中包含，没什么了不起的。然而框架中的每一部分都可以轻松细化，并且根据你的要求对答如流，我觉得或许程序员的末日已经到了吧，要只争朝夕的提桶跑路了😭\nAnyway, 回归正题，建立连接的流程不再赘述，忘了去看笔记，直接进入代码环节。\nWebserver 实现 框架代码 实验提供的框架代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #import socket module from socket import * import sys # In order to terminate the program serverSocket = socket(AF_INET, SOCK_STREAM) #Prepare a sever socket #Fill in start #Fill in end while True: #Establish the connection print('Ready to serve...') connectionSocket, addr = #Fill in start #Fill in end try: message = #Fill in start #Fill in end filename = message.split()[1] f = open(filename[1:]) outputdata = f.read() #Send one HTTP header line into socket #Fill in start #Fill in end #Send the content of the requested file to the client for i in range(0, len(outputdata)): connectionSocket.send(outputdata[i].encode()) connectionSocket.send(\"\\r\\n\".encode()) connectionSocket.close() except IOError: #Send response message for file not found #Fill in start #Fill in end #Close client socket #Fill in start #Fill in end 模块导入 最开始的部分类似于 C/C++ 的导入库，可以看到在这个代码中就包含了两种库的写法。\nfrom socket import *: 这里的 * 表示导入模块中的所有成员，直接导入到当前命名空间。 import socket: 这种方式是将模块整体导入命名空间，使用时要加上模块前缀名，例如accept要写做socket.accept。 两者分别的优势非常显然，一个简洁，一个清晰避免冲突。根据需要使用就可以了。\nSocket 模块 只写一些常用的函数，一些常量在函数实例中会有解释。\nsocket(): 用于创建一个套接字（socket）。 语法：socket(family, type, proto=0) family：地址族（如 AF_INET 表示 IPv4，AF_INET6 表示 IPv6）。 type：套接字类型（如 SOCK_STREAM 表示 TCP，SOCK_DGRAM 表示 UDP）。 proto：协议号，通常默认为 0。 bind(): 将套接字绑定到指定的地址和端口。 语法：socket.bind(address) address 是一个元组 (host, port)。 示例：s.bind((’localhost’, 8080)) listen(): 使套接字进入监听模式，等待客户端连接（仅适用于 TCP）。 语法：socket.listen(backlog) backlog：允许的最大连接数。 示例：s.listen(5) accept(): 接受客户端连接，返回一个新的套接字和客户端地址。 语法：socket.accept() 示例：connection, addr = s.accept() connect(): 主动连接到服务器（仅适用于客户端）。 语法：socket.connect(address) 示例：s.connect((’example.com’, 80)) send(): 用于发送数据。 recv(): 接收数据。 语法：socket.recv(bufsize) bufsize：接收缓冲区大小。 示例：data = s.recv(1024) close(): 关闭套接字。 语法：socket.close() 注意到除了创建套接字，其余的函数都需要类似类方法一般指定对象调用。\n那么第一个补充块的内容就很简单了，我们只需要生成一个地址，然后绑定上就可以了。我这里的地址是随便编的，反正我本地的 8080 号端口确实没有被占用。\n1 2 3 server_address = ('0.0.0.0',8080) serverSocket.bind(server_address) serverSocket.listen(5) HTTP 报文解读 一个典型的 HTTP 请求报文可能如下：\n1 2 3 4 GET /filename.html HTTP/1.1 Host: localhost:8080 ... 第一行是请求行，包含 HTTP 方法、请求文件以及协议版本。第二行首部行标识主机地址以及端口号。随后一个空行表明头部行结束。后续跟上数据。\n相应报文则应当由如下格式：\n1 2 3 4 HTTP/1.1 200 OK Content-Type: text/html ... 解读完全类似，包含状态码以及状态码解释，第二行为响应头部，注意就算是 404 不会返回任何数据仍然应当包含相应头部！\n利用 python 方法实现对报文拆分：\nsplit()：按照指定的分隔符（默认为空格）将字符串分割成一个列表。 splitline()：按照换行符（\\n 或 \\r\\n）将字符串分割成一个列表。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 connectionSocket, addr = serverSocket.accept() # 先调用 accept 建立连接 try: message = connectionSocket.recv(2048).decode() print(\"Request message:\", message) filename = message.split()[1] # 在命令行找到文件名，注意用 decode 对字符串解码 f = open(filename[1:]) outputdata = f.read() header = \"HTTP/1.1 200 OK\\r\\n\" header += \"Content-Type: text/html\\r\\n\" header += \"\\r\\n\" connectionSocket.send(header.encode()) # 先发送头部，注意要用 encode 对字符串编码 注意到我们这里用了异常处理，最为这段中最为典型的异常肯定是 open 没有找到对应的文件，也就可以对应我们的 404，我们如法炮制补充 except 的情况。\n1 2 3 4 5 6 7 except IOError: header = \"HTTP/1.1 404 Not Found\\r\\n\" header += \"Content-Type: text/html\\r\\n\" header += \"\\r\\n\" connectionSocket.send(header.encode()) # 发个 404 回去 connectionSocket.close() 这样下来最为基础的功能就完成了，我们可以简单测试，在终端运行 python3 webserver.py。再在浏览器访问对应端口 localhost:8080/index.html。我的 html 用的是网上随便薅下来的，确保和代码在同一个目录下，能够测试就可以了。\n终止机制 下面部分就已经超出了基本的要求，是一些我自己实验中拓展内容。\n如果你测试时频繁终止进程并重启你就会发现这样的问题，当我在终端上暴力的终止程序，使用 ctrl+shift+c 终端上进程确实停止运行了，然而我立刻再次运行则会报错：Traceback (most recent call last): File “/home/hspike/code/class/network/mylab/lab1/init_webserver.py”, line 8, in \u003cmodule\u003e serverSocket.bind(server_address) OSError: [Errno 98] Address already in use\n显然它的意思是我采用固定的 IP 和端口号仍在被占用，因为我暴力的终止导致了没有 close 导致了这个结果。但是一段时间后不改变代码中的 IP 与端口号就能够正常运行了，应该是操作系统介入释放了这个端口。\n当你暴力终止程序（如按下 Ctrl+Shift+C），程序会立即停止运行，导致套接字没有被正确关闭。此时：操作系统会将套接字标记为 TIME_WAIT 状态。在 TIME_WAIT 状态下，操作系统会暂时保留该端口，以确保之前的连接完全关闭，避免数据包的延迟传输影响新连接。\n操作系统会在一段时间后（通常是 30 秒到 2 分钟，具体取决于系统配置）自动释放端口。 这是 TCP 协议的机制，用于确保旧连接的数据包不会干扰新连接。\n为了避免暴力终止程序导致资源未释放，可以捕获终止信号（如 SIGINT），并在程序退出前正确关闭套接字。也就是说注册一个信号处理函数。在 ICS 课上讲过信号处理异常控制流的机制，这里不再赘述，只展示 python 语法。注意需要 signal 库。\n1 2 3 4 5 6 7 8 import signal def graceful_shutdown(signum, frame): print(\"Shutting down server...\") serverSocket.close() sys.exit(0) signal.signal(signal.SIGINT, graceful_shutdown) 这样我们就优雅的终止进程了。\nClient 实现 Client 的实现就相对简单许多了，仿照 Server 的语法，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from socket import * import sys import signal clientSocket = socket(AF_INET,SOCK_STREAM) clientSocket.connect(('localhost',8080)) message = 'GET /index.html HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n' clientSocket.send(message.encode()) response = b\"\" while True: part = clientSocket.recv(4096) if not part: break response += part print(response.decode()) 我们不再做详细的讲解。\nServer 中断连接处理 这里提一个遇到的问题，在初版的 Client 我是这样写的：\n1 2 3 4 5 6 7 8 9 10 11 from socket import * import sys import signal clientSocket = socket(AF_INET,SOCK_STREAM) clientSocket.connect(('localhost',8080)) message = 'GET /index.html HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n' clientSocket.send(message.encode()) response = clientSocket.recv(4096) print(response.decode()) 我认为本地测试的 html 文件非常小，只用接收一次便可以了，然而运行结果出乎意料，报文竟然只达到了以下部分：\n1 2 3 4 5 HTTP/1.1 200 OK Content-Type: text/html \u003c!DOCTYPE html\u003e \u003c!--STATUS OK--\u003e\u003chtm 并且切换到服务器端发现服务器进程已经终止了，核心原因是客户端只接受了很少部分报文便关闭连接，导致服务器 Send 函数抛出异常，进而导致了程序终止。\n显然客户端因为各种各样的原因中断连接很常见，不能客户端断了服务器就停摆吧，增加一个中断连接的异常处理。\n1 2 3 4 except(ConnectionResetError, BrokenPipeError): # 这些异常表示用户中断了连接 print(\"Connection with client was reset or closed.\") connectionSocket.close() 这样就优雅的处理了这个问题。\n但这里还有一个隐含的问题应当注意，代码的 4096 表示的是 4096 bytes，足足 4K。你应当意识到了问题，4K 表示一个纯文本的 html 文件错错有余，怎么会没有接收完呢？\n原因在于HTTP 相应报文的分块传输，客户端只调用一次接收，所以并没有完整的接收到整个相应。\nTo be done 这里完成了本地基础 C/S 交互，或许你意识到了这种方法借助于 TCP 提供的服务，甚至实现了进程间的通信。\n进一步改进应当有两点：\n服务器端建立连接交由子进程处理：手段在 ICS 中介绍过，明天我会进一步实现这个功能。 主机之间通信测试：暂时手上只有一个主机，明天会用另一台主机作为客户端，参与测试。 ","description":"","tags":null,"title":"lab1: 基础CS模式入门","uri":"/blog_Hspikes/posts/technology/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/lab1-%E5%9F%BA%E7%A1%80cs%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["posts"],"content":"在编写搭建个人博客网站时曾遇到这样一个问题：将图片文件存储在本地时没有任何问题，可以正常打开，网站也可以正常渲染，然而当通过 git 上传到 github 之后，部署到 github page 后图片却无法正常渲染。经过原因调查发现在 github 仓库中对应的图片文件无法正常打开，下载后 Linux 环境也无法正常打开。\n进一步查阅发现是 git config 配置的问题~~(虽然问题解决后也没能成功渲染)~~，由于以前没有详细研究关于 git 的设置，一怒之下查询了相关的资料整理了一下。\nGit 配置综述 层级结构 Git 的配置有层级之分，共有三层，类似局部变量与全局变量的关系，更高的层级有更低的优先级：\n系统级（–system）：对整个操作系统上的所有用户生效。配置文件通常在 /etc/gitconfig。 全局级（–global）：对当前用户生效。配置文件在 ~/.gitconfig 或 Windows 的 C:\\Users\u003c用户名\u003e\\.gitconfig。 仓库级（默认）：只对当前 Git 仓库生效。配置文件在仓库的 .git/config。 语法规则 这些配置项的语法规则类似结构体遵循\u003csection\u003e.\u003ckey\u003e。其中 section 时区块名，比如 core, user, branch…\n查看设置 这些配置文件默认状态下均是隐藏的，在 Linux 下以位于 . 开头的 .git 中，ls 带参数 -a 即可查看。\n对于一个特定项目，可以运行git config --list --show-origin命令，一是显示当前项目的所有配置，二是显示这些配置的来源文件。\n需要查看某一项具体配置，直接运行命令git config ***即可。\n比如本博客项目的仓库 git 配置如下：\n1 2 3 4 5 6 7 8 9 10 11 [core] repositoryformatversion = 0 filemode = true // git 会跟踪文件的可执行权限 bare = false // 是否为裸仓库，即没有工作区，常用于远程仓库 logallrefupdates = true // git 会为所有引用保留日志，在 .git/logs/ 中 [remote \"origin\"] url = git@github.com:Hspikes/blog_Hspikes.git fetch = +refs/heads/*:refs/remotes/origin/* // 在 fetch 时将远程仓库所有分支都同步到本地 [branch \"main\"] remote = origin merge = refs/heads/main 全局配置只有在你第一次设置了--global配置后才会自动生成。至于全局的配置如下：\n1 2 3 4 5 6 [user] email = ***@*** name = Hspikes [core] editor = vim autocrlf = false 可以看到全局配置基本上只约束了用户名邮箱地址、信息默认编辑器之类的，至于那个 autocrlf 我们下文会讲到。\n本项目 git 没有系统级别的配置，通常系统级均是关于服务器多人协作、企业模版等场景下运用，个人的电脑上往往都不会进行系统级设置。\n常见配置 这里的常见配置自然不包括 username, email… 一类的易懂的配置，而是总结一些较难理解却容易出错的配置。\ncore.autocrlf 显然根据区块名称这属于核心配置，auto 自动处理某些问题，crlf 代表换行相关的处理。控制的是 Git 在提交和检出文件时，是否自动转换换行符。\n一个人尽皆知的问题是不同系统的换行符不一样，Windows → CRLF (\\r\\n), Linux/macOS → LF (\\n)。Git 为了避免“同一文件在不同系统上显示换行不一致”，提供了这个自动转换机制。\n这个设置共有三种模式:\ntrue: 提交时：Git 会把 CRLF → LF(保证仓库里都是 LF)；检出时：Git 会把 LF → CRLF。 input: 提交时：Git 会把 CRLF → LF；检出时：不做转换(保持仓库里的 LF)。 false: Git 不做任何转换，提交和检出都保持原样。 我所遇到的问题便是 autocrlf 设置为 true 并且 git 提交时错误的把本属于二进制文件的图片文件 png 识别为了文本文件，导致图片文件内容被损坏。\n最合适的做法是在 .gitattributes 中声明哪些是二进制文件，比如：\n1 2 3 *.png binary *.jpg binary *.pdf binary 我这里由于开发环境，直接偷了懒，更改了全局设置，等以后出问题时再来清算吧😋\npull.rebase pull 的默认方式是 fetch + merge，若 pull.rebase = true，则默认方式为 fetch + rebase。前者会保留分支的分流历史，后者会合并两者而不保留分流历史。\n","description":"","tags":null,"title":"git-config: 关于 git 设置的一些问题","uri":"/blog_Hspikes/posts/technology/git-config/"},{"categories":["posts"],"content":"如题，总之就是各种茶，尝试复制一些奶茶店的味道🙃 (但0.5分糖)\n珍珠奶茶 最为经典的入门款，在家自己做珍珠实在太麻烦，还要自己揉面，否定！实在想要珍珠调节口感的话可以直接买一些现成的珍珠。\n原料准备红茶+奶+少许白糖，由于试验性质，原料也没必要准备过于奢侈，一般的口粮茶和盒装奶就可以了。糖的量自己控制，我个人不喜欢太甜，但是如果完全不加糖的话调味会比较诡异，一小勺白糖就可以了。\n先熬红茶，也不用讲究丢下去暴力烹煮，先大火煮沸后换小火烹煮，煮到微微闻到中药味非常浓稠。因为调配奶茶最长使用的是茶精和炼乳，这样茶味和奶味都比较重，所以用现煮的茶熬煮一定要熬的比较浓稠才能有足够的茶味。\n当红茶熬煮完成之后加入一定量的牛奶，小火慢煮知道第一次沸腾，一定要注意牛奶沸腾以后由于奶皮的缘故会噗出，注意到这个现象后动作迅速关火搅动，煮的过程就结束了。牛奶不要熬煮过久，因为熬煮过长时间后牛奶会严重沉积，导致口感非常差~~(别问我怎么知道的)~~。\n这种方式煮出来的奶茶热的味道一般，但冷冻后不说和标准的珍珠奶茶天差地别也能说是完全一样了，糖度可以自己调节。\n","description":"","tags":null,"title":"总之就是各种茶","uri":"/blog_Hspikes/posts/spike%E5%AE%B6%E4%BB%8A%E5%A4%A9%E5%90%83%E4%BB%80%E4%B9%88/%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E5%90%84%E7%A7%8D%E8%8C%B6/"},{"categories":["posts"],"content":"写在结局之前 根据诺克斯宅邸的状况，能够实现偷诺克斯的画的人只有诺克斯家里面的人，排除掉无名的仆人就只剩下了琼和诺克斯两个人。\n琼的关键问题在于作为女秘书难以一个人把尸体搬运到棺材当中，诺克斯的问题在于最开始难以栽赃卡基斯，因为琼看到杯子是卡基斯已经死之后，此时诺克斯已经无法再设局了。况且如果是诺克斯下手，他主动来到警局阐述关于画的事那一段动机过于诡异。\n这么看来两者都无法独立作案，但我实在不理解最后打字机的线索，应该还有什么疏忽之处，这里就猜诺克斯凶手吧。\n诡计鉴赏 最开始拿到这本书时一看目录，推理小说有 40 章 400 页，拖沓如占星术杀人魔法也不过 350 页，不敢想希腊棺材观感会有多糟糕。然而作者选择了连环诡计来吸引读者的主义，连环诡计的设计炉火纯青，完全足以支撑起 400 页的内容，也算是洗刷了我对埃勒里·奎因糟糕的印象了。\n第一个案就远超预期，根据茶壶的描述很容易意识到水量不正常，然而很难根据领带猜到卡基斯非盲这一点进而联想到卡基斯是凶手，这个我认为是最为精彩的一个诡计 (虽然很快被推翻了)。\n第二案就很稀疏平常了，烟草中的钥匙和没烧完的遗书栽赃的意味太明显了，又没有给出额外的线索。\n最后检察官作为凶手的设计确实出乎意料，推理小说的惯性思维作用下根本不会联想警局的一方人会出现凶手，完全没有抓住作者关于检察官的任何线索暗示，也算是棋差一着了。\n","description":"","tags":null,"title":"希腊棺材之谜: 连环诡计典范","uri":"/blog_Hspikes/posts/whodunit/%E5%B8%8C%E8%85%8A%E6%A3%BA%E6%9D%90%E4%B9%8B%E8%B0%9C/"},{"categories":["posts"],"content":"诡计鉴赏 以前老师告诉过我科研难点不仅仅在于解决问题，更在于找到问题。这对推理小说也是同理，只要找到了惯用手的角度切入思考，配合两个追查者状态的变化答案就很显然，但难点在于找到这个角度。\n最后解密时一个核心是玫瑰花纹的垃圾桶，但里面是空的，一般没读到最后很难注意到这个东西，只能后来再找，看到这大家的反映应该都一样去哥哥调查案发现场那一段找垃圾桶，但那个时候也是空的，那肯定就是中间某人丢了东西进去。如果有电子版 PDF 直接搜索玫瑰花纹一下就能定位，可惜是纸质的。\n至于案件本身两人都想行凶在现场相遇这个设定颇具想象力，可惜不是核心诡计。中途润一的不在场证明过于简陋，可以说攻破的方法不计其数，而且提到数码相机后正确答案也十拿九稳，实在称不上诡计。东野的诡计质量确实不太行。\n佳世子试图作为模仿犯连现场有泥土都知道，这设定太不合理，这种连环杀人细节都不应当纰漏就是为了防止模仿犯，警方失职太严重了😅\n","description":"","tags":null,"title":"谁杀了她","uri":"/blog_Hspikes/posts/whodunit/%E8%B0%81%E6%9D%80%E4%BA%86%E5%A5%B9/"},{"categories":["posts"],"content":"本文的内容主要参考网站 Markdown教程，记下一些自己常用常忘的语法。\n空格 文字段落内空格 $~~~$，这里是 $~~~$ 效果。\n制表 | Syntax | Description | Test Text | | :--- | :----: | ---: | | Header | Title | Here's this | | Paragraph | Text | And more | Syntax Description Test Text Header Title Here’s this Paragraph Text And more 一个简易的表格示意，第二行指定了对齐方式。\nEmoji 直接从 Emojipedia 中复制粘贴就好了。下面粘贴一些我用过的表情。类我就不分了，应该用不了几种。\n⭐🥰😅🙃😋😭\n","description":"","tags":null,"title":"Markdown语法","uri":"/blog_Hspikes/posts/technology/markdown/"},{"categories":["posts"],"content":"因为从 7 月中才开始写新番杂记，所以这个季度的杂谈不包含前一两话吧。不过话又说回来这个季度看的不太多。\n追番进度表 名称 进度 当前评价 恋人不行 第八话 ⭐⭐⭐⭐⭐ 终于等到紫阳花篇了，该结束这场闹剧了 小城日常 第六话 ⭐⭐$~~~~~~~~~~~~$ 看睡着了 这届侦探不太行 第九话 ⭐⭐⭐$~~~~~~~~$ 看完就忘了讲了什么了 琉璃的宝石 第九话 ⭐⭐⭐⭐⭐ 风姐实在可爱，结尾的升华不如第七话 完结杂谈 评价留档 恋人不行 第三话 ⭐⭐⭐⭐⭐ 非常有趣，周指活。但怎么感觉这一话没有之前富呢？穷穷的。 第四话 ⭐⭐⭐⭐⭐ 屑粉毛也是出手了，太爱紫阳花了 第五话 ⭐⭐⭐⭐⭐ 全程笑容没停下来过 第六话 ⭐⭐⭐⭐⭐ 纱月也太可爱了吧，王总：我很忠诚，我的妻子也很幸福 第七话 ⭐⭐⭐⭐⭐ 一如既往的有趣 第八话 ⭐⭐⭐⭐⭐ 终于等到紫阳花篇了，该结束这场闹剧了 小城日常 第二话 ⭐⭐⭐⭐$~~~~$ 感觉风评不是很行，但我的观感还是很好的🥰 第三话 ⭐⭐⭐$~~~~~~~~$ 开场笑话没有太 get，整体节奏不太抓得住注意力 第四话 ⭐⭐⭐⭐$~~~~$ call back 很有趣 第五话 ⭐⭐$~~~~~~~~~~~~$ 想法挺有意思的，但实在不太好看，ed 风格挺特别的 第六话 ⭐⭐$~~~~~~~~~~~~$ 看睡着了 这届侦探不太行 第五话 ⭐⭐⭐⭐⭐ 对侦探小说爱好者来说很好笑，很多会心一笑的梗 第六话 ⭐⭐⭐⭐⭐ 全程笑不停，甚至还有 call back，无敌了 第七话 ⭐⭐⭐$~~~~~~~~$ 比较无趣，几个笑点都很一般，失去了先前推理迷笑点特色 第八话 ⭐⭐⭐$~~~~~~~~$ 远不如前几话，有关推理侦探的梗很少，失去了核心看点 第九话 ⭐⭐⭐$~~~~~~~~$ 看完就忘了讲了什么了 琉璃的宝石 第四话 ⭐⭐⭐$~~~~~~~~$ 制作很好，女主有点熊孩子看得我血压高 第五话 ⭐⭐⭐⭐$~~~~$ 愿意写这种成长型人设的真不多了，我也想要挂我二作的学姐 第六话 ⭐⭐⭐⭐⭐ 渐入佳境，看到女主调查犯错那一段感觉太恐怖了 第七话 ⭐⭐⭐⭐⭐ 这话真的无敌，整体节奏非常舒适，看到中间讲薄膜反射时会心一笑，涨知识了。 第八话 ⭐⭐⭐⭐⭐ 一如既往的维持超高质量 第九话 ⭐⭐⭐⭐⭐ 风姐实在可爱，结尾的升华不如第七话 ","description":"","tags":null,"title":"2025.7新番杂记","uri":"/blog_Hspikes/posts/animation/%E6%96%B0%E7%95%AA%E6%9D%82%E8%AE%B0/2025.7/"},{"categories":["posts"],"content":"","description":"","tags":null,"title":"玫瑰的名字","uri":"/blog_Hspikes/posts/whodunit/%E7%8E%AB%E7%91%B0%E7%9A%84%E5%90%8D%E5%AD%97/"},{"categories":["posts"],"content":"This blog is to test whether the blog site is working properly.\n世人都晓神仙好，只是功名忘不来！\n古今将相今何在，荒冢一堆草没了。\n世人都晓神仙好，只是金钱忘不了！\n终朝只恨聚无多，即到多时眼闭了。\n中文字体也正常。\n1 printf(\"Hello world!\"); 但我更喜欢 cout\u003c\u003c\"Hello world!\";\n代码块也正常。\n插入图测试：\nseem to be all right?\n","description":"","tags":null,"title":"Hello World: 一些基本功能测试","uri":"/blog_Hspikes/posts/zothers/hello-world/"},{"categories":["posts"],"content":"This blog is to test whether the blog site is working properly.\nWhen n is a positive interger, $\\Gamma(n+1)=n!$, and\n$$ B(p,q)=\\frac{\\Gamma(p+q)}{\\Gamma(p)\\Gamma(q)} $$\nseem to be all right?\n","description":"","tags":null,"title":"Math Test: 数学公式书写测试","uri":"/blog_Hspikes/posts/math/hello-world/"}]
